<pre class="metadata">
Title: Ambient Light Sensor
Level: none
Status: ED
ED: https://w3c.github.io/ambient-light/
Shortname: ambient-light
TR: http://www.w3.org/TR/ambient-light/
Previous Version: https://www.w3.org/TR/2016/WD-ambient-light-20160329/
Editor: Anssi Kostiainen 41974, Intel Corporation, http://intel.com/
Former Editor: Tobie Langel 60809, Codespeaks&#44; formerly on behalf of Intel Corporation, http://tobie.me, tobie@codespeaks.com
Former Editor: Doug Turner, Mozilla Corporation, http://mozilla.com/
Group: dap
Abstract:
  This specification defines a concrete sensor interface to monitor
  the ambient light level or illuminance of the device's environment.
Version History: https://github.com/w3c/ambient-light/commits/gh-pages/index.bs
!Bug Reports: <a href="https://www.github.com/w3c/ambient-light/issues/new">via the w3c/ambient-light repository on GitHub</a>
Indent: 2
Repository: w3c/ambient-light
Markup Shorthands: markdown on
Inline Github Issues: off
!Issue Tracking: <a href="https://github.com/w3c/ambient-light/milestones/Level%202">Level 2 Issues</a>
!Test Suite: <a href="https://github.com/w3c/web-platform-tests/tree/master/ambient-light">web-platform-tests on GitHub</a>
Boilerplate: omit issues-index, omit conformance
Default Biblio Status: current
</pre>
<pre class="anchors">
urlPrefix: https://w3c.github.io/sensors; spec: GENERIC-SENSOR
  type: dfn
    text: high-level
    text: sensor subclass
    text: sensorreading subclass
    text: default sensor
    text: implementation specific; url: implementation-specific
    text: reporting mode; url: reporting-modes
    text: auto 
    text: construct a sensor object; url: construct-sensor-object
</pre>

Introduction {#intro}
============

The Ambient Light Sensor extends the Generic Sensor API [[GENERIC-SENSOR]]
to provide information about ambient light levels,
as detected by the device's main light detector, in terms of lux units.

The `light-level` media feature [[MEDIAQUERIES-4]] provides
less granular information about the ambient light level.

Note: it might be worthwhile to provide a <a>high-level</a> Light Level Sensor
which would mirror the `light-level` media feature, but in JavaScript.
This sensor would *not require additional user permission to be activated*
in user agents that exposed the `light-level` media feature.

Examples {#examples}
========

<div class="example">
    <pre highlight="js">
    let sensor = new AmbientLightSensor();
    sensor.start();
    
    sensor.onreading = function(event) {
        console.log(sensor.illuminance);
    };

    sensor.onerror = function(event) {
        console.log(event.error.name, event.error.message);
    };
    </pre>
</div>

Security and Privacy Considerations {#security-and-privacy}
===================================

There are no specific security and privacy considerations
beyond those described in the Generic Sensor API [[!GENERIC-SENSOR]].

Model {#model}
=====

The Ambient Light Sensor's associated <a>Sensor subclass</a>
is the {{AmbientLightSensor}} class.

The Ambient Light Sensor has a <a>default sensor</a>,
which is the device's main light detector.

The Ambient Light Sensor's <a>reporting mode</a> is <a>implementation
specific</a>.

The Ambient Light Sensor has an associated {{PermissionName}}
which is <a for="PermissionName" enum-value>"ambient-light-sensor"</a>.

The <dfn>current light level</dfn> or <dfn>illuminance</dfn>
is a value that represents the ambient light levels
around the hosting device. Its unit is the lux (lx) [[SI]].

Note: The precise lux value reported by
different devices in the same light can be different,
due to differences in detection method, sensor construction, etc.

API {#api}
===

The AmbientLightSensor Interface {#ambient-light-sensor-interface}
--------------------------------

<pre class="idl">
  [Constructor(optional SensorOptions sensorOptions)]
  interface AmbientLightSensor : Sensor {
    readonly attribute unrestricted double? illuminance;
  };
</pre>

To <dfn>Construct an AmbientLightSensor Object</dfn> the user agent must invoke the 
<a>construct a Sensor object</a> abstract operation.

### The illuminance attribute ### {#ambient-light-sensor-reading-attribute}

The <a attribute for="AmbientLightSensor">illuminance</a> attribute of the {{AmbientLightSensor}}
interface represents the <a>current light level</a>.

Use Cases and Requirements {#usecases-requirements}
=========

1. A Web application gradually updates document style based on light level changes.
1. A Web application provides input for a smart home system to control lighting.
1. A Web aplication checks whether light level at work space is sufficient, based on occupational
   health regulations.
1. A Web application monitors light level changes produced by hovering hand user gesture and
   interprets them to control a game character.
1. A Web application calculates settings for a camera with manual controls (apperture, shutter speed, ISO).

The mentioned use cases require plain light level data, not a pre-defined set of values.

Acknowledgements {#acknowledgements}
================

Doug Turner for the initial prototype and
Marcos Caceres for the test suite.

Paul Bakaus for the LightLevelSensor idea.

Mikhail Pozdnyakov and Alexander Shalamov for the use cases and requirements.

Conformance {#conformance}
===========

Conformance requirements are expressed with a combination of
descriptive assertions and RFC 2119 terminology. The key words "MUST",
"MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
"RECOMMENDED", "MAY", and "OPTIONAL" in the normative parts of this
document are to be interpreted as described in RFC 2119.
However, for readability, these words do not appear in all uppercase
letters in this specification.

All of the text of this specification is normative except sections
explicitly marked as non-normative, examples, and notes. [[!RFC2119]]

A <dfn>conformant user agent</dfn> must implement all the requirements
listed in this specification that are applicable to user agents.

The IDL fragments in this specification must be interpreted as required for
conforming IDL fragments, as described in the Web IDL specification. [[!WEBIDL]]
